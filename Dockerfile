############################################
####  Dockerfile generated by gopaddle  ####
############################################

# Stage 1 - Build the project 
FROM ubuntu:latest AS build
ENV WORKDIR /out
COPY ./ ${WORKDIR}
WORKDIR ${WORKDIR}
RUN apt-get update && apt-get install default-jdk curl maven -y && mvn clean install

# Stage 2 - Run the project
FROM ubuntu:latest
ENV APPDIR /app
ENV OUTPUTDIR ./
ENV BUILD_OUT /out
RUN mkdir -p ${APPDIR}/${OUTPUTDIR}
WORKDIR ${APPDIR}
COPY --from=build ${BUILD_OUT} ${APPDIR}/${OUTPUTDIR}

# Add Environment Variables
ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/sail/gpctl/gpctl/gpcmdline
ENV PWD=/sail/samples/spring-boot-hello-world
ENV OLDPWD=/sail/gpctl/gpctl/gpcmdline

# Install the dependent libaries and packages
RUN apt-get update && apt-get install -y openjdk-11-jre-headless curl

# Create directories to copy binaries and symbolic links
RUN mkdir -p /usr/lib/jvm/java-11-openjdk-amd64 

# Copy dependent binaries from build stage
COPY --from=build /usr/lib/jvm/java-11-openjdk-amd64/bin/java /usr/lib/jvm/java-11-openjdk-amd64/bin/java
COPY --from=build /usr/lib/jvm/java-11-openjdk-amd64/bin/jar /usr/lib/jvm/java-11-openjdk-amd64/bin/jar

# Create dependent symbolic links
RUN  test -f "/etc/alternatives/java" || ln -s /usr/lib/jvm/java-11-openjdk-amd64/bin/java /etc/alternatives/java
RUN  test -f "/usr/bin/java" || ln -s /etc/alternatives/java /usr/bin/java
RUN  test -f "/etc/alternatives/jar" || ln -s /usr/lib/jvm/java-11-openjdk-amd64/bin/jar /etc/alternatives/jar
RUN  test -f "/usr/bin/jar" || ln -s /etc/alternatives/jar /usr/bin/jar

# Set the user and group for the process
RUN /usr/sbin/groupadd gopaddle && /usr/sbin/useradd -g gopaddle -d /app gopaddle
USER gopaddle

# Add Healthcheck
HEALTHCHECK --interval=30s --timeout=30s --start-period=10s --retries=3 CMD ["/bin/sh", "-c" , "/usr/bin/curl http://localhost:8080/hello"]

# Run the container
ENTRYPOINT ["/bin/sh", "-c" , "java -jar target/hello-world-1.0.1-SNAPSHOT.jar"]
